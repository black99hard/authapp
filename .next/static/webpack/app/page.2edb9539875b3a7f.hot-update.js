"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthService: () => (/* binding */ AuthService)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(app-pages-browser)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"(app-pages-browser)/./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// In-memory storage for prototype\nconst users = new Map();\nconst otpSessions = new Map();\nconst loginAttempts = new Map();\nconst accountLockouts = new Map();\nconst securitySettings = new Map();\nclass AuthService {\n    // Generate a random 6-digit OTP\n    static generateOTP() {\n        return Math.floor(100000 + Math.random() * 900000).toString();\n    }\n    // Hash password using bcrypt\n    static async hashPassword(password) {\n        return bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(password, 12);\n    }\n    // Verify password\n    static async verifyPassword(password, hash) {\n        return bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compare(password, hash);\n    }\n    // Register new user\n    static async registerUser(username, email, phone, password) {\n        // Check if user already exists\n        const existingUser = Array.from(users.values()).find((user)=>user.username === username || user.email === email || user.phone === phone);\n        if (existingUser) {\n            return {\n                success: false,\n                message: \"User already exists with this username, email, or phone\"\n            };\n        }\n        // Create new user\n        const userId = crypto__WEBPACK_IMPORTED_MODULE_1___default().randomUUID();\n        const passwordHash = await this.hashPassword(password);\n        const newUser = {\n            id: userId,\n            username,\n            email,\n            phone,\n            passwordHash,\n            createdAt: new Date()\n        };\n        users.set(userId, newUser);\n        return {\n            success: true,\n            message: \"User registered successfully\",\n            userId\n        };\n    }\n    // Login user\n    static async loginUser(username, password, deviceInfo) {\n        const user = Array.from(users.values()).find((u)=>u.username === username);\n        if (!user) {\n            return {\n                success: false,\n                message: \"Invalid username or password\"\n            };\n        }\n        // Check if account is locked\n        const lockoutTime = accountLockouts.get(user.id);\n        if (lockoutTime && new Date() < lockoutTime) {\n            const remainingMinutes = Math.ceil((lockoutTime.getTime() - Date.now()) / (1000 * 60));\n            return {\n                success: false,\n                message: \"Account locked. Try again in \".concat(remainingMinutes, \" minutes.\"),\n                isLocked: true\n            };\n        }\n        const isValidPassword = await this.verifyPassword(password, user.passwordHash);\n        // Record login attempt\n        const attempt = {\n            timestamp: new Date(),\n            success: isValidPassword,\n            ipAddress: deviceInfo === null || deviceInfo === void 0 ? void 0 : deviceInfo.ipAddress,\n            userAgent: deviceInfo === null || deviceInfo === void 0 ? void 0 : deviceInfo.userAgent\n        };\n        const userAttempts = loginAttempts.get(user.id) || [];\n        userAttempts.push(attempt);\n        loginAttempts.set(user.id, userAttempts.slice(-10)) // Keep last 10 attempts\n        ;\n        if (!isValidPassword) {\n            // Check for account lockout (5 failed attempts in 15 minutes)\n            const recentFailures = userAttempts.filter((a)=>!a.success && new Date().getTime() - a.timestamp.getTime() < 15 * 60 * 1000);\n            if (recentFailures.length >= 5) {\n                accountLockouts.set(user.id, new Date(Date.now() + 30 * 60 * 1000)) // Lock for 30 minutes\n                ;\n                return {\n                    success: false,\n                    message: \"Too many failed attempts. Account locked for 30 minutes.\",\n                    isLocked: true\n                };\n            }\n            return {\n                success: false,\n                message: \"Invalid username or password\"\n            };\n        }\n        // Clear lockout on successful login\n        accountLockouts.delete(user.id);\n        // Store user for biometric authentication on successful login\n        this.storeUserForBiometric(user.id);\n        return {\n            success: true,\n            message: \"Login successful\",\n            userId: user.id\n        };\n    }\n    // Generate and store OTP for user\n    static generateOTPForUser(userId) {\n        const otp = this.generateOTP();\n        const expiresAt = new Date(Date.now() + 60 * 1000) // 60 seconds from now\n        ;\n        otpSessions.set(userId, {\n            userId,\n            otp,\n            expiresAt,\n            attempts: 0\n        });\n        // For prototype: log OTP to console\n        console.log(\"[2FA Prototype] OTP for user \".concat(userId, \": \").concat(otp));\n        return {\n            otp,\n            expiresAt\n        };\n    }\n    // Verify OTP\n    static verifyOTP(userId, inputOTP) {\n        const session = otpSessions.get(userId);\n        if (!session) {\n            return {\n                success: false,\n                message: \"No OTP session found. Please request a new OTP.\"\n            };\n        }\n        // Check if OTP is expired\n        if (new Date() > session.expiresAt) {\n            otpSessions.delete(userId);\n            return {\n                success: false,\n                message: \"OTP has expired. Please request a new one.\"\n            };\n        }\n        // Increment attempts\n        session.attempts++;\n        // Check if too many attempts\n        if (session.attempts > 3) {\n            otpSessions.delete(userId);\n            return {\n                success: false,\n                message: \"Too many failed attempts. Please request a new OTP.\"\n            };\n        }\n        // Verify OTP\n        if (session.otp !== inputOTP) {\n            return {\n                success: false,\n                message: \"Invalid OTP. Please try again.\"\n            };\n        }\n        // Success - clean up session\n        otpSessions.delete(userId);\n        return {\n            success: true,\n            message: \"OTP verified successfully\"\n        };\n    }\n    // Get user by ID\n    static getUser(userId) {\n        return users.get(userId);\n    }\n    // Get remaining OTP time\n    static getOTPTimeRemaining(userId) {\n        const session = otpSessions.get(userId);\n        if (!session) return 0;\n        const remaining = session.expiresAt.getTime() - Date.now();\n        return Math.max(0, Math.floor(remaining / 1000));\n    }\n    // Get login history\n    static getLoginHistory(userId) {\n        return loginAttempts.get(userId) || [];\n    }\n    // Get security settings\n    static getSecuritySettings(userId) {\n        return securitySettings.get(userId) || {\n            twoFactorEnabled: true,\n            trustedDevices: [],\n            sessionTimeout: 30,\n            loginNotifications: true\n        };\n    }\n    // Update security settings\n    static updateSecuritySettings(userId, settings) {\n        const current = this.getSecuritySettings(userId);\n        securitySettings.set(userId, {\n            ...current,\n            ...settings\n        });\n    }\n    // Store user in localStorage for biometric authentication\n    static storeUserForBiometric(userId) {\n        if (true) {\n            localStorage.setItem(\"biometric_user_id\", userId);\n        }\n    }\n    // Get stored user for biometric authentication\n    static getStoredBiometricUser() {\n        if (true) {\n            return localStorage.getItem(\"biometric_user_id\");\n        }\n        return null;\n    }\n    // Remove stored biometric user\n    static removeStoredBiometricUser() {\n        if (true) {\n            localStorage.removeItem(\"biometric_user_id\");\n        }\n    }\n    // Biometric authentication using stored user\n    static authenticateWithBiometric() {\n        const storedUserId = this.getStoredBiometricUser();\n        if (!storedUserId) {\n            return {\n                success: false,\n                message: \"No biometric user found. Please login with username and password first.\"\n            };\n        }\n        const user = this.getUser(storedUserId);\n        if (!user) {\n            // Clean up invalid stored user\n            this.removeStoredBiometricUser();\n            return {\n                success: false,\n                message: \"Stored user not found. Please login with username and password.\"\n            };\n        }\n        // Record successful biometric login attempt\n        const attempt = {\n            timestamp: new Date(),\n            success: true,\n            ipAddress: \"biometric\",\n            userAgent: \"biometric-auth\"\n        };\n        const userAttempts = loginAttempts.get(storedUserId) || [];\n        userAttempts.push(attempt);\n        loginAttempts.set(storedUserId, userAttempts.slice(-10));\n        return {\n            success: true,\n            message: \"Biometric authentication successful\",\n            userId: storedUserId\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/auth.ts\n"));

/***/ })

});